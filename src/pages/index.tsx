import { type NextPage } from "next";
import Head from "next/head";
import * as DOMPurify from 'dompurify';

import { api } from "~/utils/api";
import { Suspense, useEffect, useState } from "react";
import { getDaf } from "~/utils/dataSources";
import type { SefariaResponse } from "~/utils/dataSources";
import {  generateDafSummary } from "~/utils/promptHelpers";
import Card from "~/components/card";
import { Chat} from "~/components/chat/chat";
import { type ChatItem } from "~/components/chat/ChatContent";

const defaultOpts = {
  refetchOnWindowFocus: false, 
  refetchOnMount: false,
  refetchOnReconnect: false, 
  refetchInterval: 0,
}

const useSummary = (text: string, ref?: string) => {
  return api.openai.getSummary.useQuery({ 
    text: generateDafSummary(text, ref)}, 
    { enabled: !!ref }
  )
}

const useRambam = (ref?: string) => {
  return api.openai.getRambam.useQuery({ text: ref ?? ''}, { enabled: !!ref, ...defaultOpts });
}

const useRashi = (ref?: string) => {
  return api.openai.getRashi.useQuery({ text: ref ?? ''}, { enabled: !!ref, ...defaultOpts });
}

const useGemaraRabbis = (ref?: string) => {
  const trimmedRef = ref?.slice(0, 2000) ?? '';
  return api.openai.getGemara.useQuery({ text: trimmedRef}, { enabled: !!ref, ...defaultOpts });
}


const Home: NextPage = () => {
  const [daf, setDaf] = useState<SefariaResponse>();
  const summary = useSummary(daf?.text.join(' ') || '', daf?.ref);
  const rambam = useRambam(daf?.ref);
  const rashi = useRashi(daf?.ref);
  const gemaraRabbis = useGemaraRabbis(daf?.text.join(' ') || '');
  const [context, setContext] = useState<ChatItem[]>([]);

  const getDaileyDaf = () : void => {
    getDaf(new Date()).then((daf) => {
      setDaf(daf);
      console.log('daf', daf);
    }).catch((error) => {
      console.error('error fetching daily daf', error);
    });
  }

  useEffect(() => {
    if(daf) {
    setContext(
      [
        {
          author: 'AI',
          content: `What is the summary of ${daf.ref}?`,
        }
      ]
    );
    }
  }, [daf]);
  

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#848cff] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            My <span className="text-indigo-700">GPT</span> Rabbi
          </h1>

          <div className="grid grid-cols-1 gap-4 sm:grid-cols-1 md:gap-8 w-full">
            <div className="block text-center w-full m-auto">
            <p>Welcome to MyGPTRabbi - Grab the daily Talmud Portion to begin the chat...</p>
            <p>Please note that this is an experimental project for fun - please do not rely on the results for halachic decisions.</p>
            </div>
            <button onClick={getDaileyDaf} className="rounded-full bg-white/50 px-10 py-3 font-semibold text-black no-underline transition hover:bg-white/70">Get Daf</button>

            {/* Daf Summary */}
            <Card>
              <h2 className="font-bold text-lg"> {daf?.ref} </h2>
              {
                summary && (
                  <div className="font-serif font-neutral-normal leading-6 text-black-100 tracking-wide">
                    <Suspense fallback={<div>Loading...</div>}>
                      <h3 className="font-bold text-lg py-4"> Here is a summary of {daf?.ref}: </h3>
                      <div>
                      <p key={Math.random()}>
                      {daf && summary.isLoading ? "Loading..." : summary.data?.response}
                      </p>
                      </div>
                    </Suspense>
                    

                    <h3 className="font-bold text-lg py-4"> Rabbis with opinions: </h3>
                    <div>
                      <p key={Math.random()}>
                      { daf && gemaraRabbis.isLoading ? "Loading..." : gemaraRabbis.data?.response}
                      </p> 
                    </div>
                    
                    <h3 className="font-bold text-lg py-4"> Rambam Says: </h3>
                    <div>
                      <p key={Math.random()}>
                      { daf && rambam.isLoading ? "Loading..." : rambam.data?.response}
                      </p> 
                    </div>

                    <h3 className="font-bold text-lg py-4"> Rashi Says: </h3>
                    <div>
                      <p key={Math.random()}>
                      { daf && rashi.isLoading ? "Loading..." : rashi.data?.response}
                      </p> 
                    </div>
                  </div>
                )

              }      
            </Card>

            <Card>
              {context.length > 0 && <Chat />}
            </Card>

            {/* Full Daf */}
            <Card>
            <div className="font-serif font-neutral-normal leading-10 text-black-100 tracking-wide">
                <h3 className="font-bold text-lg py-4">Source:</h3>
                <h6><a className="text-blue-400" href={daf?.versionSource}>{daf?.ref} - {daf?.versionTitle}</a> (from <a className="text-blue-400" href="https://www.sefaria.org">Sefaria.org</a>)</h6>
                {daf?.text.map((line, index) => {
                    return <p className="py-2 pr-20 leading-6 " key={index} dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(line.join())}} />
                  })
                }
              </div>
            </Card>
          </div>
        </div>
      </main>
    </>
  );
};
    


export default Home;